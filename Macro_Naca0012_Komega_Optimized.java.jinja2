// Simcenter STAR-CCM+ macro: Macro_Naca0012_Komega_Optimized.java
// Written by Simcenter STAR-CCM+ 19.02.009
package macro;

import java.util.*;

import star.common.*;
import star.base.neo.*;
import star.base.report.*;
import star.flow.*;
import star.energy.*;
import star.meshing.*;

public class Macro_Naca0012_Komega_Optimized extends StarMacro {

   // Define flow conditions
  double mach={{ velocity / (gamma * Ru * static_temp / M_air) ** power }};
  double velocity={{ velocity }}; // m/s
  double ref_pressure={{ ref_pressure }}; // Pa
  double static_temp={{ static_temp }}; // Kelvin
  String autosaveDirectory = "C:\\Thesis_Destinus\\Script\\Sauvegarde";

  public void execute() {
    execute0();
  }

  private void execute0() {

    Simulation simulation_0 = 
      getActiveSimulation();

    Solution solution_0 = 
      simulation_0.getSolution();

    solution_0.clearSolution();

    MeshPipelineController meshPipelineController_0 = 
      simulation_0.get(MeshPipelineController.class);

    meshPipelineController_0.generateVolumeMesh();

    PhysicsContinuum physicsContinuum_0 = 
      ((PhysicsContinuum) simulation_0.getContinuumManager().getContinuum("Physics 1"));

    Units units_1 = 
      ((Units) simulation_0.getUnitsManager().getObject("Pa"));

    physicsContinuum_0.getReferenceValues().get(ReferencePressure.class).setValueAndUnits(ref_pressure, units_1);

    StaticTemperatureProfile staticTemperatureProfile_0 = 
      physicsContinuum_0.getInitialConditions().get(StaticTemperatureProfile.class);

    Units units_2 = 
      ((Units) simulation_0.getUnitsManager().getObject("K"));

    staticTemperatureProfile_0.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValueAndUnits(static_temp, units_2);

    VelocityProfile velocityProfile_0 = 
      physicsContinuum_0.getInitialConditions().get(VelocityProfile.class);

    Units units_0 = 
      ((Units) simulation_0.getUnitsManager().getObject("m/s"));

    velocityProfile_0.getMethod(ConstantVectorProfileMethod.class).getQuantity().setComponentsAndUnits(velocity, 0.0, 0.0, units_0);

    Region region_0 = 
      simulation_0.getRegionManager().getRegion("Region");

    Boundary boundary_0 = 
      region_0.getBoundaryManager().getBoundary("Subtract.Domain.Inlet");

    MachNumberProfile machNumberProfile_0 = 
      boundary_0.getValues().get(MachNumberProfile.class);

    Units units_3 = 
      ((Units) simulation_0.getUnitsManager().getObject(""));

    machNumberProfile_0.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValueAndUnits(mach, units_3);

    StaticTemperatureProfile staticTemperatureProfile_1 = 
      boundary_0.getValues().get(StaticTemperatureProfile.class);

    staticTemperatureProfile_1.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValueAndUnits(static_temp, units_2);

    Boundary boundary_1 = 
      region_0.getBoundaryManager().getBoundary("Subtract.Domain.Outlet");

    StaticTemperatureProfile staticTemperatureProfile_2 = 
      boundary_1.getValues().get(StaticTemperatureProfile.class);

    staticTemperatureProfile_2.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValueAndUnits(static_temp, units_2);

    ForceCoefficientReport forceCoefficientReport_0 = 
      ((ForceCoefficientReport) simulation_0.getReportManager().getReport("Cl"));

    forceCoefficientReport_0.getReferenceVelocity().setValueAndUnits(velocity, units_0);

    ForceCoefficientReport forceCoefficientReport_1 = 
      ((ForceCoefficientReport) simulation_0.getReportManager().getReport("Cd"));

    forceCoefficientReport_1.getReferenceVelocity().setValueAndUnits(velocity, units_0);

    simulation_0.getSimulationIterator().run();

    MonitorPlot monitorPlot_0 = 
      ((MonitorPlot) simulation_0.getPlotManager().getPlot("Cl Monitor Plot"));

    monitorPlot_0.export(resolvePath("C:\\Thesis_Destinus\\Script\\Cl.csv"), ",");

  }
}


